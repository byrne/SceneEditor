<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:mxml="editor.view.mxml.*" 
					   creationComplete="init()"
					   invoke="app_invokeHandler(event)"
					   width="600" height="600"
					   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import editor.utils.FileSerializer;
			import editor.utils.LogUtil;
			import editor.utils.StringUtil;
			import editor.utils.swf.CustomEvent;
			import editor.utils.swf.SWF;
			import editor.view.mxml.CustomListItemSkin;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ItemClickEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			private var file:FileReference;
			
			[Bindable]
			private var symbolList:ArrayCollection;
			
			private var swf:SWF;
			
			private function app_invokeHandler(evt:InvokeEvent):void {
				var args:Array = evt.arguments;
				if(args.length <= 0) {
					LogUtil.error("usage: SwfReader configFile");
					return;
				}
				var configFileName:String = args[0] as String;
				var config:Object = FileSerializer.readJsonFile(configFileName);
				var base_dir:String = config["base_dir"];
				var output_file:String = config["output_file"];
				output_file = output_file.replace("{base_dir}", base_dir);
				var file_list:Array = config["file_list"] as Array;
				var output:Object = new Object();
				output["base_dir"] = base_dir;
				output["symbol_classes"] = new Object();
				for each(var fileName:String in file_list) {
//					fileName = fileName.replace("{base_dir}", base_dir);
					fileName = StringUtil.substitute("{0}/{1}", base_dir, fileName);
					dumpSwfSymbolClass(fileName, output, output_file);
				}
			}
			
			private static var remainSwfCnt:int;
			private function dumpSwfSymbolClass(fileName:String, output:Object, output_file:String):void {
				remainSwfCnt += 1;
				var ba:ByteArray = FileSerializer.readBytesFromFile(fileName);
				var swf:SWF = new SWF(ba);
				var base_dir:String = output["base_dir"];
				swf.addEventListener(Event.COMPLETE, function(evt:Event):void {
					var symbols:Array = swf.symbolClassNamesArr;
					fileName = fileName.substr(base_dir.length+1);
					output["symbol_classes"][fileName] = symbols;
					LogUtil.info("dump swf symbol class {0}, count {1}", fileName, symbols.length);
					remainSwfCnt -= 1;
					if(remainSwfCnt <= 0) {
						FileSerializer.writeJsonFile(output, output_file);
						LogUtil.info("write to file: {0}", output_file);
//						exit();
					}
				});
				swf.process();
			}
			
			private function init() :void {
				symbolList = new ArrayCollection();
				this.addEventListener(CustomEvent.EVENT_RECT_CHAGNE, handleRectChange);
			}
			
			private function initList() :void {
				list.dataProvider = symbolList;
				list.addEventListener(ItemClickEvent.ITEM_CLICK, itemClickHandler);
			}
			
			private function handleRectChange(e:CustomEvent) :void {
				var rc:Rectangle = e.data.rect;
				leftTxt.text = rc.left.toFixed(1);
				topTxt.text = rc.top.toFixed(1);
				widthTxt.text = rc.width.toFixed(1);
				heightTxt.text = rc.height.toFixed(1);
			}
			private function onClick():void {
				file = new FileReference();
				file.addEventListener(Event.SELECT, selectHandler);
				
				var allFilter:FileFilter = new FileFilter("swf (*.swf)", "*.swf");
				
				file.browse(new Array(allFilter));
				
			}
			private function selectHandler(event:Event):void {
				file.addEventListener(Event.COMPLETE, onLoadComplete);				
				file.load(); 
			}
			
			private function onLoadComplete(event:Event):void {			
				swf = new SWF(file.data);
				swf.addEventListener(Event.COMPLETE, function(evt:Event):void {
					var symbols:Array = swf.symbolClassNamesArr;
					symbolList = new ArrayCollection();
					for each(var symbol:String in symbols) {
						symbolList.addItem(symbol);
					}
					symbolList.source.sort(Array.CASEINSENSITIVE);
					currentState = "Opened";
				});
				swf.process();
			}
			
			private function getClass(className:String):Class {
				return swf.getClassByName(className);
			}
			
			private function _selectItem(name:String):void {
				var itemClass:Class = getClass(name);
				if (itemClass == null) {
					Alert.show("Class not found: "+name);					
				} else {
					var item:DisplayObject = new itemClass();
					canvas.show(item);
				}
			}
			private function itemClickHandler(evt:ItemClickEvent):void {				
				_selectItem(String(evt.item));
			}
			
			private function lst_changeHandler(evt:IndexChangeEvent):void {
				var selItems:Vector.<Object> = evt.currentTarget.selectedItems;
				if (selItems.length > 0) {
					_selectItem(String(selItems[0]));
				}
			}
			
			private function filterMyArrayCollection(item:Object):Boolean {
				var searchString:String = searchTxt.text.toLowerCase();
				var itemName:String = (item as String).toLowerCase();
				return itemName.indexOf(searchString) > -1;
			}
			
			protected function searchTxt_changeHandler(event:TextOperationEvent):void
			{
				symbolList.filterFunction = filterMyArrayCollection;
				symbolList.refresh();
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="beforeOpen"/>
		<s:State name="Opened"/>
	</s:states>
	
	<s:Panel x="0" y="0" width="600" height="600" title="Asset SWF Viewer ">
		<s:Button click="onClick()"  label="Open a Asset SWF..." includeIn="beforeOpen" height="100" width="200" fontSize="15" horizontalCenter="0" verticalCenter="0"/>
		<s:List includeIn="Opened" x="8" y="29" width="154" height="517" id="list"
				itemRenderer="editor.view.mxml.CustomListItemSkin" creationComplete="initList()" change="lst_changeHandler(event)">
		</s:List>
		<s:Scroller  includeIn="Opened" x="170" y="29" percentWidth="100" percentHeight="100"   height="517">
			<s:Group width="418" height="517">
				<mxml:PreviewCanvas id="canvas" >
				</mxml:PreviewCanvas>
			</s:Group>
		</s:Scroller>
		<s:TextInput includeIn="Opened" x="9" y="4" width="152" id="searchTxt" change="searchTxt_changeHandler(event)"/>
		<s:HGroup x="180" y="9" includeIn="Opened" >
			<s:Label   text="Left:"/>
			<s:Label  width="40"  id="leftTxt" text=" "/>
			<s:Label   text="Top:"/>
			<s:Label  width="40" id="topTxt" text=" "/>
			<s:Label   text="Width:"/>
			<s:Label  width="40"  id="widthTxt" text=" "/>
			<s:Label   text="Height:" />
			<s:Label  width="40" id="heightTxt" text=" "/>
		</s:HGroup>
	</s:Panel>
</s:WindowedApplication>
